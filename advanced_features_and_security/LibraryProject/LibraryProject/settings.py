"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$ta^)#fyk2u0_1($24*z!%j!8gh2#no46_(r!!o6m*#pet#x85'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1', 'your_domain.com', 'localhost']

# Configure SECURE_BROWSER_XSS_FILTER, X_FRAME_OPTIONS, and SECURE_CONTENT_TYPE_NOSNIFF
# SECURE_BROWSER_XSS_FILTER: Enables the X-XSS-Protection header, instructing browsers
# to activate their built-in Cross-Site Scripting (XSS) filters. This provides an
# additional layer of defense against XSS attacks.

SECURE_BROWSER_XSS_FILTER = True

# X_FRAME_OPTIONS: Prevents clickjacking attacks by disallowing your site from being
# embedded in a frame. DENY is the strongest option.
X_FRAME_OPTIONS = 'DENY'

# SECURE_CONTENT_TYPE_NOSNIFF: Prevents browsers from "sniffing" the content type
# of a response away from the declared Content-Type header. This helps mitigate
# MIME-type sniffing vulnerabilities.
SECURE_CONTENT_TYPE_NOSNIFF = True

# CSRF_COOKIE_SECURE: Ensures the CSRF token cookie is only sent over HTTPS connections.
# This prevents the CSRF token from being intercepted in plain text over insecure channels,
# protecting against certain types of CSRF token theft.
CSRF_COOKIE_SECURE =True

# SESSION_COOKIE_SECURE: Ensures the session cookie is only sent over HTTPS connections.
# This protects session IDs from being intercepted, which could lead to session hijacking.
SESSION_COOKIE_SECURE = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',
    'relationship_app',
    'csp',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'csp.middleware.CSPMiddleware', # Content Security Policy middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


# --- Content Security Policy (CSP) Settings (via django-csp) ---
# Implemented using django-csp middleware to specify allowed content sources,
# significantly reducing the risk of XSS attacks by preventing browsers from
# loading unauthorized scripts, styles, or other resources.

CONTENT_SECURITY_POLICY = {
    'DIRECTIVES': {
        'default-src': ("'self'",), # Allow content only from the same origin by default
        'script-src': ("'self'",), # Allow JavaScript only from the same origin
        'style-src': ("'self'", "'unsafe-inline'",), # Allow CSS from same origin and necessary inline styles
        'img-src': ("'self'", 'data:', 'https://placehold.co'), # Allow images from same origin, data URIs, and specific external placeholder service
        'font-src': ("'self'",), # Allow fonts only from the same origin
        'connect-src': ("'self'",), # Allow network connections (XHR, WebSockets) only to the same origin
        'object-src': ("'none'",), # Disallow <object>, <embed>, <applet> elements entirely
        'base-uri': ("'self'",), # Restrict base URL for relative URLs
        'form-action': ("'self'",), # Restrict form submission targets to the same origin
        'frame-ancestors': ("'self'",), # Prevent embedding this page in iframes from other domains
        # 'report-uri': '/csp-report/', # Optional: Configure a URL to receive CSP violation reports
    },
    # Optional: Set to True to only report violations without blocking them.
    # CONTENT_SECURITY_POLICY_REPORT_ONLY = True
}




ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_URL = '/login/'
AUTH_USER_MODEL = 'bookshelf.CustomUser'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'